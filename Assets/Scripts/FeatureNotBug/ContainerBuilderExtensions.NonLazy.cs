// <auto-generated/>
using System;
using VContainer;
using VContainer.Unity;

namespace FeatureNotBug;

public static partial class ContainerBuilderExtensions {
    public static void UseNonLazy(this IContainerBuilder builder, Action<NonLaziesBuilder> configuration) {
        configuration(new NonLaziesBuilder(builder));
    }

    public readonly struct NonLaziesBuilder {
        readonly IContainerBuilder _containerBuilder;

        public NonLaziesBuilder(IContainerBuilder containerBuilder) {
            _containerBuilder = containerBuilder;
        }

        public RegistrationBuilder AddTransient<TImplement>() {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<TImplement>(Lifetime.Transient);
        }

        public RegistrationBuilder AddSingleton<TImplement>() {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<TImplement>(Lifetime.Singleton);
        }

        public RegistrationBuilder AddScoped<TImplement>() {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<TImplement>(Lifetime.Scoped);
        }

        public RegistrationBuilder AddTransient<Interface1, TImplement>() where TImplement : Interface1 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, TImplement>(Lifetime.Transient);
        }

        public RegistrationBuilder AddSingleton<Interface1, TImplement>() where TImplement : Interface1 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, TImplement>(Lifetime.Singleton);
        }

        public RegistrationBuilder AddScoped<Interface1, TImplement>() where TImplement : Interface1 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, TImplement>(Lifetime.Scoped);
        }

        public RegistrationBuilder AddTransient<Interface1, Interface2, TImplement>() where TImplement : Interface1, Interface2 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, Interface2, TImplement>(Lifetime.Transient);
        }

        public RegistrationBuilder AddSingleton<Interface1, Interface2, TImplement>() where TImplement : Interface1, Interface2 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, Interface2, TImplement>(Lifetime.Singleton);
        }

        public RegistrationBuilder AddScoped<Interface1, Interface2, TImplement>() where TImplement : Interface1, Interface2 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, Interface2, TImplement>(Lifetime.Scoped);
        }

        public RegistrationBuilder AddTransient<Interface1, Interface2, Interface3, TImplement>() where TImplement : Interface1, Interface2, Interface3 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, Interface2, Interface3, TImplement>(Lifetime.Transient);
        }

        public RegistrationBuilder AddSingleton<Interface1, Interface2, Interface3, TImplement>() where TImplement : Interface1, Interface2, Interface3 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, Interface2, Interface3, TImplement>(Lifetime.Singleton);
        }

        public RegistrationBuilder AddScoped<Interface1, Interface2, Interface3, TImplement>() where TImplement : Interface1, Interface2, Interface3 {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TImplement>());
            return _containerBuilder.Register<Interface1, Interface2, Interface3, TImplement>(Lifetime.Scoped);
        }

        public RegistrationBuilder AddTransient<TInterface>(Func<IObjectResolver, TInterface> implementationConfiguration) where TInterface : class {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TInterface>());
            return _containerBuilder.Register<TInterface>(implementationConfiguration, Lifetime.Transient);
        }

        public RegistrationBuilder AddSingleton<TInterface>(Func<IObjectResolver, TInterface> implementationConfiguration) where TInterface : class {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TInterface>());
            return _containerBuilder.Register<TInterface>(implementationConfiguration, Lifetime.Singleton);
        }

        public RegistrationBuilder AddScoped<TInterface>(Func<IObjectResolver, TInterface> implementationConfiguration) where TInterface : class {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<TInterface>());
            return _containerBuilder.Register<TInterface>(implementationConfiguration, Lifetime.Scoped);
        }

        public RegistrationBuilder AddSingletonEntryPoint<T>() {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<T>());
            return _containerBuilder.RegisterEntryPoint<T>(Lifetime.Singleton);
        }

        public RegistrationBuilder AddScopedEntryPoint<T>() {
            _containerBuilder.RegisterBuildCallback(static resolver => resolver.Resolve<T>());
            return _containerBuilder.RegisterEntryPoint<T>(Lifetime.Scoped);
        }
    }
}
