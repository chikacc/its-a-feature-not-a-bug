<#@ assembly name="$(SolutionDir)\Library\ScriptAssemblies\VContainer.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VContainer" #>
<# var lifetimes = Enum.GetNames(typeof(Lifetime)); #>
// <auto-generated/>
using System;
using VContainer;

namespace FeatureNotBug;

public static partial class ContainerBuilderExtensions {
    public static void UseServices(this IContainerBuilder builder, Action<ServicesBuilder> configuration) {
        configuration(new ServicesBuilder(builder));
    }

    public readonly struct ServicesBuilder {
        readonly IContainerBuilder _containerBuilder;

        public ServicesBuilder(IContainerBuilder containerBuilder) {
            _containerBuilder = containerBuilder;
        }

<# for (var i = 0; i < 4; ++i) { #>
<# if (i > 0) { #>

<# } #>
<# for (var j = 0; j < lifetimes.Length; ++j) { #>
<# var lifetime = lifetimes[j]; #>
<# var generics = string.Join(", ", Enumerable.Range(0, i).Select(x => $"Interface{x + 1}").Append("TImplement")); #>
<# var interfaces = string.Join(", ", Enumerable.Range(0, i).Select(x => $"Interface{x + 1}")); #>
<# if (j > 0) { #>

<# } #>
<# if (string.IsNullOrEmpty(interfaces)) { #>
        public RegistrationBuilder Add<#= lifetime #><<#= generics #>>() {
<# } else { #>
        public RegistrationBuilder Add<#= lifetime #><<#= generics #>>() where TImplement : <#= interfaces #> {
<# } #>
            return _containerBuilder.Register<<#= generics #>>(Lifetime.<#= lifetime #>);
        }
<# } #>
<# } #>
    }
}
